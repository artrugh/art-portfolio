{"ast":null,"code":"import { useEffect, useState, useLayoutEffect, useRef } from \"react\";\nexport const useMousePosition = () => {\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    const setFromEvent = e => setPosition({\n      x: e.clientX,\n      y: e.clientY\n    });\n\n    window.addEventListener(\"mousemove\", setFromEvent);\n    return () => {\n      window.removeEventListener(\"mousemove\", setFromEvent);\n    };\n  }, []);\n  return position;\n}; // hook to add scroll event\n// documentation\n// https://github.com/n8tb1t/use-scroll-position\n// https://dev.to/n8tb1t/tracking-scroll-position-with-react-hooks-3bbj\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect; // the type of window is an object\n\nconst isBrowser = typeof window !== `undefined`;\n\nfunction getScrollPosition({\n  element,\n  useWindow\n}) {\n  if (!isBrowser) return {\n    x: 0,\n    y: 0\n  }; // if there is an element in the DOM to target, target. If not target the body\n\n  const target = element ? element.current : document.body; // get the positions(x,y,height,width, etc) of the target element\n\n  const position = target.getBoundingClientRect();\n  return useWindow ? {\n    x: window.scrollX,\n    y: window.scrollY\n  } : {\n    x: position.left,\n    y: position.top\n  };\n}\n\nexport function useScrollPosition(effect, deps, element, useWindow, wait) {\n  // return x: window.scrollX, y: window.scrollY \n  const position = useRef(getScrollPosition({\n    useWindow\n  }));\n  let throttleTimeout = null;\n\n  const callBack = () => {\n    const currPos = getScrollPosition({\n      element,\n      useWindow\n    });\n    effect({\n      prevPos: position.current,\n      currPos\n    });\n    position.current = currPos;\n    throttleTimeout = null;\n  };\n\n  useIsomorphicLayoutEffect(() => {\n    if (!isBrowser) {\n      return;\n    }\n\n    const handleScroll = () => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(callBack, wait);\n        }\n      } else {\n        callBack();\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, deps);\n}\nuseScrollPosition.defaultProps = {\n  deps: [],\n  element: false,\n  useWindow: false,\n  wait: null\n}; // hook to get the window's width and height\n\nconst getWindowDimensions = () => {\n  // get the width and the height from the window object\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n};\n\nexport const useWindowDimensions = () => {\n  // set default state of the hook\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions()); // set event when the window is resize\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // return the hook with the data\n\n  return windowDimensions;\n}; // hook to manege Nav Bar\n\nexport const useNavBar = (colorRight, colorLeft) => {\n  // get the width and height from the window\n  const {\n    width,\n    height\n  } = useWindowDimensions(); // set the scroll Border Nav Hook\n\n  const [scrollPorcent, setScrollPorcent] = useState(``);\n  const grey = \"#969696\";\n  const red = \"#721e25\";\n  useScrollPosition(({\n    prevPos,\n    currPos\n  }) => {\n    // get the scrollposition if < 50 windowlenght  ? position : bottom position\n    let scroll = Math.abs(currPos.y) < height ? Math.abs(currPos.y) : Math.abs(currPos.y) + height; // get the total height of the document\n\n    let documentHeight = document.body.scrollHeight; // set porcentages\n\n    let left = Math.floor(scroll * 100 / documentHeight);\n    let right = 100 - left; // set the border Image strings\n\n    let linearGradient = left > 50 ? `linear-gradient(to right, ${red} ${left}%, ${grey} ${right}%)1` : `linear-gradient(to left, ${grey} ${right}%, ${red} ${left}%)1`; // store on the hook\n\n    setScrollPorcent(linearGradient);\n  });\n}; // const [scrollPorcent, setScrollPorcent] = useState(``)\n// useScrollPosition(({ prevPos, currPos }) => {\n//   const grey = \"#969696\"\n//   const red = \"#721e25\"\n//   // get the scrollposition if < 50 windowlenght  ? position : bottom position\n//   let scroll = Math.abs(currPos.y) < height ? Math.abs(currPos.y) : Math.abs(currPos.y) + height;\n//   // get the total height of the document\n//   let documentHeight = document.body.scrollHeight\n//   // set porcentages\n//   let left = Math.floor(scroll * 100 / documentHeight);\n//   let right = 100 - left;\n//   // set the border Image strings\n//   let linearGradient = left > 50 ?\n//     `linear-gradient(to right, ${red} ${left}%, ${grey} ${right}%)1` :\n//     `linear-gradient(to left, ${grey} ${right}%, ${red} ${left}%)1`\n//   // store on the hook\n//   return setScrollPorcent(linearGradient)\n// })","map":{"version":3,"sources":["/Users/arturorugh/Documents/code/art-portfolio/src/helpers/hooks.js"],"names":["useEffect","useState","useLayoutEffect","useRef","useMousePosition","position","setPosition","x","y","setFromEvent","e","clientX","clientY","window","addEventListener","removeEventListener","useIsomorphicLayoutEffect","isBrowser","getScrollPosition","element","useWindow","target","current","document","body","getBoundingClientRect","scrollX","scrollY","left","top","useScrollPosition","effect","deps","wait","throttleTimeout","callBack","currPos","prevPos","handleScroll","setTimeout","defaultProps","getWindowDimensions","innerWidth","width","innerHeight","height","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","useNavBar","colorRight","colorLeft","scrollPorcent","setScrollPorcent","grey","red","scroll","Math","abs","documentHeight","scrollHeight","floor","right","linearGradient"],"mappings":"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","sourcesContent":["import { useEffect, useState, useLayoutEffect, useRef } from \"react\";\n\nexport const useMousePosition = () => {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  useEffect(() => {\n    const setFromEvent = e => setPosition({ x: e.clientX, y: e.clientY });\n    window.addEventListener(\"mousemove\", setFromEvent);\n    return () => {\n      window.removeEventListener(\"mousemove\", setFromEvent);\n    };\n  }, []);\n  return position;\n};\n\n\n// hook to add scroll event\n// documentation\n// https://github.com/n8tb1t/use-scroll-position\n// https://dev.to/n8tb1t/tracking-scroll-position-with-react-hooks-3bbj\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\n// the type of window is an object\nconst isBrowser = typeof window !== `undefined`\n\nfunction getScrollPosition({ element, useWindow }) {\n\n  if (!isBrowser) return { x: 0, y: 0 }\n\n  // if there is an element in the DOM to target, target. If not target the body\n  const target = element ? element.current : document.body\n  // get the positions(x,y,height,width, etc) of the target element\n  const position = target.getBoundingClientRect()\n\n  return useWindow\n    ? { x: window.scrollX, y: window.scrollY }\n    : { x: position.left, y: position.top }\n}\n\nexport function useScrollPosition(effect, deps, element, useWindow, wait) {\n  // return x: window.scrollX, y: window.scrollY \n  const position = useRef(getScrollPosition({ useWindow }))\n\n  let throttleTimeout = null\n\n  const callBack = () => {\n    const currPos = getScrollPosition({ element, useWindow })\n    effect({ prevPos: position.current, currPos })\n    position.current = currPos\n    throttleTimeout = null\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    if (!isBrowser) {\n      return\n    }\n\n    const handleScroll = () => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(callBack, wait)\n        }\n      } else {\n        callBack()\n      }\n    }\n\n    window.addEventListener('scroll', handleScroll)\n\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, deps)\n}\n\nuseScrollPosition.defaultProps = {\n  deps: [],\n  element: false,\n  useWindow: false,\n  wait: null,\n}\n\n\n// hook to get the window's width and height\n\nconst getWindowDimensions = () => {\n  // get the width and the height from the window object\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport const useWindowDimensions = () => {\n  // set default state of the hook\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  // set event when the window is resize\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  // return the hook with the data\n  return windowDimensions;\n}\n\n// hook to manege Nav Bar\nexport const useNavBar = (colorRight, colorLeft) => {\n  // get the width and height from the window\n  const { width, height } = useWindowDimensions();\n  // set the scroll Border Nav Hook\n  const [scrollPorcent, setScrollPorcent] = useState(``)\n\n  const grey = \"#969696\"\n  const red = \"#721e25\"\n\n  useScrollPosition(({ prevPos, currPos }) => {\n\n    // get the scrollposition if < 50 windowlenght  ? position : bottom position\n    let scroll = Math.abs(currPos.y) < height ? Math.abs(currPos.y) : Math.abs(currPos.y) + height;\n    // get the total height of the document\n    let documentHeight = document.body.scrollHeight\n\n    // set porcentages\n    let left = Math.floor(scroll * 100 / documentHeight);\n    let right = 100 - left;\n    // set the border Image strings\n    let linearGradient = left > 50 ?\n      `linear-gradient(to right, ${red} ${left}%, ${grey} ${right}%)1` :\n      `linear-gradient(to left, ${grey} ${right}%, ${red} ${left}%)1`\n\n    // store on the hook\n    setScrollPorcent(linearGradient)\n\n  })\n\n  \n\n\n\n}\n\n\n\n\n\n// const [scrollPorcent, setScrollPorcent] = useState(``)\n\n// useScrollPosition(({ prevPos, currPos }) => {\n\n//   const grey = \"#969696\"\n//   const red = \"#721e25\"\n\n//   // get the scrollposition if < 50 windowlenght  ? position : bottom position\n//   let scroll = Math.abs(currPos.y) < height ? Math.abs(currPos.y) : Math.abs(currPos.y) + height;\n//   // get the total height of the document\n//   let documentHeight = document.body.scrollHeight\n\n//   // set porcentages\n//   let left = Math.floor(scroll * 100 / documentHeight);\n//   let right = 100 - left;\n//   // set the border Image strings\n//   let linearGradient = left > 50 ?\n//     `linear-gradient(to right, ${red} ${left}%, ${grey} ${right}%)1` :\n//     `linear-gradient(to left, ${grey} ${right}%, ${red} ${left}%)1`\n\n//   // store on the hook\n//   return setScrollPorcent(linearGradient)\n\n// })"]},"metadata":{},"sourceType":"module"}