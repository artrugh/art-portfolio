{"ast":null,"code":"import { useEffect, useState, useLayoutEffect, useRef } from \"react\";\nexport const useMousePosition = () => {\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    const setFromEvent = e => setPosition({\n      x: e.clientX,\n      y: e.clientY\n    });\n\n    window.addEventListener(\"mousemove\", setFromEvent);\n    return () => {\n      window.removeEventListener(\"mousemove\", setFromEvent);\n    };\n  }, []);\n  return position;\n}; // hook to add scroll event\n// documentation\n// https://github.com/n8tb1t/use-scroll-position\n// https://dev.to/n8tb1t/tracking-scroll-position-with-react-hooks-3bbj\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect; // the type of window is an object\n\nconst isBrowser = typeof window !== `undefined`;\n\nfunction getScrollPosition({\n  element,\n  useWindow\n}) {\n  if (!isBrowser) return {\n    x: 0,\n    y: 0\n  }; // if there is an element in the DOM to target, target. If not target the body\n\n  const target = element ? element.current : document.body; // get the positions(x,y,height,width, etc) of the target element\n\n  const position = target.getBoundingClientRect();\n  return useWindow ? {\n    x: window.scrollX,\n    y: window.scrollY\n  } : {\n    x: position.left,\n    y: position.top\n  };\n}\n\nexport function useScrollPosition(effect, deps, element, useWindow, wait) {\n  // return x: window.scrollX, y: window.scrollY \n  const position = useRef(getScrollPosition({\n    useWindow\n  }));\n  let throttleTimeout = null;\n\n  const callBack = () => {\n    const currPos = getScrollPosition({\n      element,\n      useWindow\n    });\n    effect({\n      prevPos: position.current,\n      currPos\n    });\n    position.current = currPos;\n    throttleTimeout = null;\n  };\n\n  useIsomorphicLayoutEffect(() => {\n    if (!isBrowser) {\n      return;\n    }\n\n    const handleScroll = () => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(callBack, wait);\n        }\n      } else {\n        callBack();\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, deps);\n}\nuseScrollPosition.defaultProps = {\n  deps: [],\n  element: false,\n  useWindow: false,\n  wait: null\n};","map":{"version":3,"sources":["/Users/arturorugh/Documents/code/art-portfolio/src/helpers/hooks.js"],"names":["useEffect","useState","useLayoutEffect","useRef","useMousePosition","position","setPosition","x","y","setFromEvent","e","clientX","clientY","window","addEventListener","removeEventListener","useIsomorphicLayoutEffect","isBrowser","getScrollPosition","element","useWindow","target","current","document","body","getBoundingClientRect","scrollX","scrollY","left","top","useScrollPosition","effect","deps","wait","throttleTimeout","callBack","currPos","prevPos","handleScroll","setTimeout","defaultProps"],"mappings":"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","sourcesContent":["import { useEffect, useState , useLayoutEffect, useRef } from \"react\";\n\nexport const useMousePosition = () => {\n    const [position, setPosition] = useState({ x: 0, y: 0 });\n    useEffect(() => {\n        const setFromEvent = e => setPosition({ x: e.clientX, y: e.clientY });\n        window.addEventListener(\"mousemove\", setFromEvent);\n        return () => {\n            window.removeEventListener(\"mousemove\", setFromEvent);\n        };\n    }, []);\n    return position;\n};\n\n\n// hook to add scroll event\n// documentation\n// https://github.com/n8tb1t/use-scroll-position\n// https://dev.to/n8tb1t/tracking-scroll-position-with-react-hooks-3bbj\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\n// the type of window is an object\nconst isBrowser = typeof window !== `undefined`\n\nfunction getScrollPosition({ element, useWindow }) {\n\n  if (!isBrowser) return { x: 0, y: 0 }\n\n  // if there is an element in the DOM to target, target. If not target the body\n  const target = element ? element.current : document.body\n  // get the positions(x,y,height,width, etc) of the target element\n  const position = target.getBoundingClientRect()\n\n  return useWindow\n    ? { x: window.scrollX, y: window.scrollY }\n    : { x: position.left, y: position.top }\n}\n\nexport function useScrollPosition(effect, deps, element, useWindow, wait) {\n  // return x: window.scrollX, y: window.scrollY \n  const position = useRef(getScrollPosition({ useWindow }))\n\n  let throttleTimeout = null\n\n  const callBack = () => {\n    const currPos = getScrollPosition({ element, useWindow })\n    effect({ prevPos: position.current, currPos })\n    position.current = currPos\n    throttleTimeout = null\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    if (!isBrowser) {\n      return\n    }\n\n    const handleScroll = () => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(callBack, wait)\n        }\n      } else {\n        callBack()\n      }\n    }\n\n    window.addEventListener('scroll', handleScroll)\n\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, deps)\n}\n\nuseScrollPosition.defaultProps = {\n  deps: [],\n  element: false,\n  useWindow: false,\n  wait: null,\n}"]},"metadata":{},"sourceType":"module"}